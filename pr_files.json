[
    {
        "sha": "0e5ac7936c5c65810a5db0786828e4a9e284fcb1",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/.gitignore",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/.gitignore",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/.gitignore?ref=b38c85c3927327189b3e43417b83e1c13d946e6d",
        "patch": "@@ -1 +1,2 @@\n-.venv\n\\ No newline at end of file\n+.venv\n+__pycache__\n\\ No newline at end of file"
    },
    {
        "sha": "c52ae5a1b53d4268c5434d2795c7125f094ee732",
        "filename": "django_app/db.sqlite3",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fdb.sqlite3",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fdb.sqlite3",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/django_app%2Fdb.sqlite3?ref=b38c85c3927327189b3e43417b83e1c13d946e6d"
    },
    {
        "sha": "1407253a85a9016896b3bfc5b9b991f79641fc78",
        "filename": "django_app/django_app/__pycache__/__init__.cpython-310.pyc",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fdjango_app%2F__pycache__%2F__init__.cpython-310.pyc",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fdjango_app%2F__pycache__%2F__init__.cpython-310.pyc",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/django_app%2Fdjango_app%2F__pycache__%2F__init__.cpython-310.pyc?ref=b38c85c3927327189b3e43417b83e1c13d946e6d"
    },
    {
        "sha": "0303bee0470a030ffb6b96a08035b08056c5e06a",
        "filename": "django_app/django_app/__pycache__/settings.cpython-310.pyc",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fdjango_app%2F__pycache__%2Fsettings.cpython-310.pyc",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fdjango_app%2F__pycache__%2Fsettings.cpython-310.pyc",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/django_app%2Fdjango_app%2F__pycache__%2Fsettings.cpython-310.pyc?ref=b38c85c3927327189b3e43417b83e1c13d946e6d"
    },
    {
        "sha": "bf063b43cb88fd10920763b0364b773f38604cde",
        "filename": "django_app/django_app/urls.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fdjango_app%2Furls.py",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fdjango_app%2Furls.py",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/django_app%2Fdjango_app%2Furls.py?ref=b38c85c3927327189b3e43417b83e1c13d946e6d",
        "patch": "@@ -16,7 +16,10 @@\n \"\"\"\n from django.contrib import admin\n from django.urls import path\n+from home.views import start_task, task_status_view\n \n urlpatterns = [\n+    path('start_task/', start_task),\n+    path('task_status/<task_id>/', task_status_view),\n     path('admin/', admin.site.urls),\n ]"
    },
    {
        "sha": "7b130acdef885929b536eb5400ea57e6c2eb7cf6",
        "filename": "django_app/home/tasks.py",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fhome%2Ftasks.py",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fhome%2Ftasks.py",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/django_app%2Fhome%2Ftasks.py?ref=b38c85c3927327189b3e43417b83e1c13d946e6d",
        "patch": "@@ -0,0 +1,11 @@\n+from celery import Celery\n+from celery import shared_task\n+from home.utils.github import analyze_pr\n+ \n+app=Celery(\"django_app\")\n+app.config_from_object(\"django.conf:settings\",namespace=\"CELERY\")\n+\n+@shared_task\n+def analyze_repo_task(repo_url, pr_number, github_token=None):\n+    result= analyze_pr(repo_url, pr_number, github_token)\n+    return result\n\\ No newline at end of file"
    },
    {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "django_app/home/utils/__init__.py",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fhome%2Futils%2F__init__.py",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fhome%2Futils%2F__init__.py",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/django_app%2Fhome%2Futils%2F__init__.py?ref=b38c85c3927327189b3e43417b83e1c13d946e6d"
    },
    {
        "sha": "697f8f531dfad793af61819273feaf8134c09a6f",
        "filename": "django_app/home/utils/ai_agent.py",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fhome%2Futils%2Fai_agent.py",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fhome%2Futils%2Fai_agent.py",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/django_app%2Fhome%2Futils%2Fai_agent.py?ref=b38c85c3927327189b3e43417b83e1c13d946e6d",
        "patch": "@@ -0,0 +1,41 @@\n+from groq import Groq\n+\n+key='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'\n+\n+def analyze_code_with_llm(file_content,file_name):\n+    prompt=f\"\"\"\n+         Aalyze the following code for :\n+         - code style and formatting issues\n+         - potential bugs and errors\n+         - performance improvements\n+         - best practices\n+    \n+    File : {file_name}\n+    Content: {file_content}\n+    \n+    provide a detailed json output with structure\"\n+    {{\n+            \"issues\":[\n+                {{\n+                \"type\":\"<style|error|performance|best_practice>\",\n+                \"line\": <line_number>,\n+                \"description\": \"<description>\",\n+                \"suggestion\": \"<suggestion>\"\n+            }}\n+            ]\n+    }}\n+    ```json\n+    \"\"\"\n+    \n+    client = Groq(api_key=key)\n+    completion=client.chat.completions.create(\n+        model=\"llama3-8b-8192\",\n+        messages=[{\n+            \"role\":\"user\",\n+            \"content\":prompt\n+        }],\n+        temperature=1,\n+        top_p=1,\n+    )\n+    \n+    return completion.choices[0].message.content\n\\ No newline at end of file"
    },
    {
        "sha": "3e12a4fe59a482c0805437c965450afc96c2183b",
        "filename": "django_app/home/utils/github.py",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fhome%2Futils%2Fgithub.py",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fhome%2Futils%2Fgithub.py",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/django_app%2Fhome%2Futils%2Fgithub.py?ref=b38c85c3927327189b3e43417b83e1c13d946e6d",
        "patch": "@@ -1,8 +1,8 @@\n import requests\n import base64\n from urllib.parse import urlparse\n-\n-from urllib.parse import urlparse\n+import uuid\n+from .ai_agent import analyze_code_with_llm\n \n def get_owner_repo(url):\n     parsed_url = urlparse(url)\n@@ -40,3 +40,27 @@ def fetch_file_content(repo_url, file_path, github_token=None):\n     \n     \n         \n+def analyze_pr(repo_url, pr_number, github_token=None):\n+    task_id=str(uuid.uuid4())\n+    try:\n+        pr_files=fetch_pr_files(repo_url, pr_number, github_token)\n+        analysis_results=[]\n+        for file in pr_files:\n+            file_name=file[\"filename\"]\n+            raw_content=fetch_file_content(repo_url, file_name, github_token)\n+            analysis_result=analyze_code_with_llm(raw_content,file_name)\n+            analysis_results.append({\n+                \"results\":analysis_result,\n+                \"file_name\":file_name\n+            })\n+            \n+            return {\n+                \"task_id\":task_id,\n+                \"results\":analysis_results,\n+            }\n+    except Exception as e:\n+        print(f\"Error analyzing PR: {e}\")\n+        return {\n+            \"task_id\":task_id,\n+            \"results\":[],\n+        }\n\\ No newline at end of file"
    },
    {
        "sha": "f894ace25d22626af217f1c31b57c44bfe53d236",
        "filename": "django_app/home/views.py",
        "status": "modified",
        "additions": 29,
        "deletions": 2,
        "changes": 31,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fhome%2Fviews.py",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/django_app%2Fhome%2Fviews.py",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/django_app%2Fhome%2Fviews.py?ref=b38c85c3927327189b3e43417b83e1c13d946e6d",
        "patch": "@@ -1,3 +1,30 @@\n-from django.shortcuts import render\n+from rest_framework.decorators import api_view\n+from rest_framework.response import Response\n+from .tasks import analyze_repo_task\n+from celery.result import AsyncResult\n \n-# Create your views here.\n+@api_view([\"POST\"])\n+def start_task(request):\n+    data = request.data\n+    repo_url = data.get(\"repo_url\")\n+    pr_number = data.get(\"pr_number\")\n+    github_token = data.get(\"github_token\")\n+    task=analyze_repo_task.delay(repo_url, pr_number, github_token)\n+    \n+    return Response({\n+        \"task_id\":task.id,\n+        \"status\":\"Task started\"\n+    })\n+    \n+    \n+    \n+@api_view([\"GET\"])\n+def task_status_view(request, task_id):\n+    result=AsyncResult(task_id)\n+    print(\"Task status:\",result)\n+    response={\n+        \"task_id\":task_id,\n+        \"status\":result.status,\n+        \"result\":result.result\n+    }\n+    return Response(response)\n\\ No newline at end of file"
    },
    {
        "sha": "92a95e6811b4521dfdf60aab8819500b899260cd",
        "filename": "fastapi_app/__pycache__/main.cpython-310.pyc",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/fastapi_app%2F__pycache__%2Fmain.cpython-310.pyc",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/fastapi_app%2F__pycache__%2Fmain.cpython-310.pyc",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/fastapi_app%2F__pycache__%2Fmain.cpython-310.pyc?ref=b38c85c3927327189b3e43417b83e1c13d946e6d"
    },
    {
        "sha": "081c452a2d28b8ea9db32a68e9edffaf526b0093",
        "filename": "fastapi_app/main.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/fastapi_app%2Fmain.py",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/fastapi_app%2Fmain.py",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/fastapi_app%2Fmain.py?ref=b38c85c3927327189b3e43417b83e1c13d946e6d",
        "patch": "@@ -1,6 +1,7 @@\n from fastapi import FastAPI,status\n from pydantic  import BaseModel\n from typing import Optional\n+import httpx\n \n app = FastAPI()\n \n@@ -16,6 +17,21 @@ async def start_task_endpoint(task_request: AnalyzePRRequest):\n         \"pr_number\":task_request.pr_number,\n         \"github_token\":task_request.github_token\n     }\n+    async with httpx.AsyncClient() as client:\n+        response=await client.post(\"http://127.0.0.1:8000/start_task/\",data=data)\n+        \n+        if response.status_code!=status.HTTP_200_OK:\n+            return {\"error\":\"Failed to start task\"}\n     print(data)\n     return {\"task_id\": \"1234\", \"status\": \"task started\"}\n \n+\n+\n+@app.get(\"/task_status/{task_id}/\")\n+async def task_status_endpoint(task_id: str):\n+    async with httpx.AsyncClient() as client:\n+        response=await client.get(f\"http://127.0.0.1:8000/task_status/{task_id}/\")\n+        return response.json()\n+    \n+    return {\"message\":\"something went wrong\"}\n+    \n\\ No newline at end of file"
    },
    {
        "sha": "899410a44900c1ba2940b2b07b2c85c8680488ac",
        "filename": "sripts.py",
        "status": "modified",
        "additions": 99,
        "deletions": 57,
        "changes": 156,
        "blob_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/blob/b38c85c3927327189b3e43417b83e1c13d946e6d/sripts.py",
        "raw_url": "https://github.com/Abhi9868/AI-PR-Review-Checker/raw/b38c85c3927327189b3e43417b83e1c13d946e6d/sripts.py",
        "contents_url": "https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/sripts.py?ref=b38c85c3927327189b3e43417b83e1c13d946e6d",
        "patch": "@@ -1,73 +1,115 @@\n-import requests\n+# import requests\n import base64\n-from urllib.parse import urlparse\n+# from urllib.parse import urlparse\n+from groq import Groq\n \n-from urllib.parse import urlparse\n+key='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'\n \n-def get_owner_repo(url):\n-    parsed_url = urlparse(url)\n-    if not parsed_url.path:\n-        raise ValueError(\"Invalid URL: Missing path component\")\n-    path = parsed_url.path.strip(\"/\")  # Remove leading and trailing slashes\n-    parts = path.split(\"/\")\n-    if len(parts) < 2:\n-        return None, None\n+def analyze_code_with_llm(file_content,file_name):\n+    prompt=f\"\"\"\n+         Aalyze the following code for :\n+         - code style and formatting issues\n+         - potential bugs and errors\n+         - performance improvements\n+         - best practices\n     \n-    owner, repo = parts[0], parts[1]\n-    return owner, repo\n+    File : {file_name}\n+    Content: {file_content}\n+    \n+    provide a detailed json output with structure\"\n+    {{\n+            \"issues\":[\n+                {{\n+                \"type\":\"<style|error|performance|best_practice>\",\n+                \"line\": <line_number>,\n+                \"description\": \"<description>\",\n+                \"suggestion\": \"<suggestion>\"\n+            }}\n+            ]\n+    }}\n+    ```json\n+    \"\"\"\n+    \n+    client = Groq(api_key=key)\n+    completion=client.chat.completions.create(\n+        model=\"llama3-70b-8192\",\n+        messages=[{\n+            \"role\":\"user\",\n+            \"content\":prompt\n+        }],\n+        temperature=1,\n+        top_p=1,\n+    )\n+    print(completion.choices[0].message.content)  \n+\n+code_str=\"ZnJvbSBmYXN0YXBpIGltcG9ydCBGYXN0QVBJLHN0YXR1cwpmcm9tIHB5ZGFu\\ndGljICBpbXBvcnQgQmFzZU1vZGVsCmZyb20gdHlwaW5nIGltcG9ydCBPcHRp\\nb25hbAoKYXBwID0gRmFzdEFQSSgpCgpjbGFzcyBBbmFseXplUFJSZXF1ZXN0\\nKEJhc2VNb2RlbCk6CiAgICByZXBvX3VybDogc3RyCiAgICBwcl9udW1iZXI6\\nIGludAogICAgZ2l0aHViX3Rva2VuOiBPcHRpb25hbFtzdHJdID0gTm9uZQoK\\nQGFwcC5wb3N0KCIvc3RhcnRfdGFzay8iKQphc3luYyBkZWYgc3RhcnRfdGFz\\na19lbmRwb2ludCh0YXNrX3JlcXVlc3Q6IEFuYWx5emVQUlJlcXVlc3QpOgog\\nICAgZGF0YT17CiAgICAgICAgInJlcG9fdXJsIjp0YXNrX3JlcXVlc3QucmVw\\nb191cmwsCiAgICAgICAgInByX251bWJlciI6dGFza19yZXF1ZXN0LnByX251\\nbWJlciwKICAgICAgICAiZ2l0aHViX3Rva2VuIjp0YXNrX3JlcXVlc3QuZ2l0\\naHViX3Rva2VuCiAgICB9CiAgICBwcmludChkYXRhKQogICAgcmV0dXJuIHsi\\ndGFza19pZCI6ICIxMjM0IiwgInN0YXR1cyI6ICJ0YXNrIHN0YXJ0ZWQifQoK\\n\" \n+\n+analyze_code_with_llm((base64.b64decode(code_str).decode(\"utf-8\")),\"script.py\")\n+\n+# def get_owner_repo(url):\n+#     parsed_url = urlparse(url)\n+#     if not parsed_url.path:\n+#         raise ValueError(\"Invalid URL: Missing path component\")\n+#     path = parsed_url.path.strip(\"/\")  # Remove leading and trailing slashes\n+#     parts = path.split(\"/\")\n+#     if len(parts) < 2:\n+#         return None, None\n+    \n+#     owner, repo = parts[0], parts[1]\n+#     return owner, repo\n \n \n-def fetch_pr_files(repo_url, pr_number, github_token=None):\n-    owner, repo = get_owner_repo(repo_url)\n-    url=f\"https://api.github.com/repos/{owner}/{repo}/pulls/{pr_number}/files\"\n-    headers = {\n-        \"Authorization\": f\"token {github_token}\",\n-    } if github_token else {}\n-    response = requests.get(url, headers=headers)\n-    response.raise_for_status()\n-    return response.json()\n+# def fetch_pr_files(repo_url, pr_number, github_token=None):\n+#     owner, repo = get_owner_repo(repo_url)\n+#     url=f\"https://api.github.com/repos/{owner}/{repo}/pulls/{pr_number}/files\"\n+#     headers = {\n+#         \"Authorization\": f\"token {github_token}\",\n+#     } if github_token else {}\n+#     response = requests.get(url, headers=headers)\n+#     response.raise_for_status()\n+#     return response.json()\n \n-def fetch_file_content(repo_url, file_path, github_token=None):\n-    owner, repo = get_owner_repo(repo_url)\n-    url=f\"https://api.github.com/repos/{owner}/{repo}/contents/{file_path}\"\n-    headers = {\n-        \"Authorization\": f\"token {github_token}\",\n-    } if github_token else {}\n-    response = requests.get(url, headers=headers)\n-    response.raise_for_status()\n-    content= response.json()\n-    return base64.b64decode(content[\"content\"]).decode(\"utf-8\")\n+# def fetch_file_content(repo_url, file_path, github_token=None):\n+#     owner, repo = get_owner_repo(repo_url)\n+#     url=f\"https://api.github.com/repos/{owner}/{repo}/contents/{file_path}\"\n+#     headers = {\n+#         \"Authorization\": f\"token {github_token}\",\n+#     } if github_token else {}\n+#     response = requests.get(url, headers=headers)\n+#     response.raise_for_status()\n+#     content= response.json()\n+#     return base64.b64decode(content[\"content\"]).decode(\"utf-8\")\n     \n     \n         \n \n-def collect_files(url, files=None):\n-    if files is None:\n-        files = []\n+# def collect_files(url, files=None):\n+#     if files is None:\n+#         files = []\n \n-    try:\n-        response = requests.get(url)\n-        response.raise_for_status()\n-        data = response.json()\n+#     try:\n+#         response = requests.get(url)\n+#         response.raise_for_status()\n+#         data = response.json()\n \n-        for item in data:\n-            if item[\"type\"] == \"file\":\n-                files.append({\n-                    \"name\": item[\"name\"],\n-                    \"path\": item[\"path\"],\n-                    \"download_url\": item[\"download_url\"]\n-                })\n-            elif item[\"type\"] == \"dir\":\n-                collect_files(item[\"url\"], files)  # Recursive call\n-    except requests.exceptions.RequestException as e:\n-        print(f\"Error fetching {url}: {e}\")\n+#         for item in data:\n+#             if item[\"type\"] == \"file\":\n+#                 files.append({\n+#                     \"name\": item[\"name\"],\n+#                     \"path\": item[\"path\"],\n+#                     \"download_url\": item[\"download_url\"]\n+#                 })\n+#             elif item[\"type\"] == \"dir\":\n+#                 collect_files(item[\"url\"], files)  # Recursive call\n+#     except requests.exceptions.RequestException as e:\n+#         print(f\"Error fetching {url}: {e}\")\n     \n-    return files\n+#     return files\n \n-if __name__ == \"__main__\":\n-    base_url = \"https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/\"\n-    collected_files = collect_files(base_url)\n+# if __name__ == \"__main__\":\n+#     base_url = \"https://api.github.com/repos/Abhi9868/AI-PR-Review-Checker/contents/\"\n+#     collected_files = collect_files(base_url)\n     \n-    print(f\"Total files collected: {len(collected_files)}\")\n-    for file in collected_files:\n-        print(file)\n+#     print(f\"Total files collected: {len(collected_files)}\")\n+#     for file in collected_files:\n+#         print(file)"
    }
]